import {
	asciiFont,
	joinPath,
} from '@dovenv/core/utils'

import {
	pkgBadges,
	socialBadges,
} from './utils'

import type { PackageJSON } from '@dovenv/core/utils'

export type ConstsConfig = {
	/**
	 * Workspace Package JSON object for use in `dovenv` configuration
	 * @example
	 * import { getCurrentDir, joinPath, getObjectFromJSONFile } from '@dovenv/core/utils'
	 * const workspaceDir = joinPath( getCurrentDir( import.meta.url ), '../../../../' )
	 * const pkg = await getObjectFromJSONFile( joinPath( workspaceDir, 'package.json' ) )
	 * @example
	 * import { getWorkspaceConfig } from '@dovenv/theme-pigeonposse'
	 * const { pkg } = await getWorkspaceConfig({metaURL: import.meta.url, path: '../../../../'} )
	 */
	pkg?          : PackageJSON
	/**
	 * Workspace directory for use in `dovenv` configuration
	 */
	workspaceDir? : string
	/**
	 * Packages directory for use in `dovenv` configuration
	 *  @default
	 * join( this.workspaceDir, 'packages')
	 */
	packagesDir?  : string
	/**
	 * Main Library Package JSON object
	 * @default this.pkg
	 */
	corePkg?      : PackageJSON
	/**
	 * Main lib directory for use in `dovenv` configuration
	 * @default this.workspaceDir
	 */
	coreDir?      : string
}

export const getPigeonposseData = ( params?: ConstsConfig ): Record<string, unknown> => {

	const {
		pkg,
		workspaceDir,
		corePkg = params?.pkg || {},
		coreDir = params?.workspaceDir || '',
		packagesDir = joinPath( params?.workspaceDir || '', 'packages' ),
	} = params || {}

	if ( !pkg || typeof pkg !== 'object' ) return {}

	const processPeople = ( people?: PackageJSON['contributors'] ) =>
		people?.filter( person =>
			typeof person === 'object'
			&& 'name' in person
			&& person.name
			&& 'url' in person,
		).map( person =>
			// @ts-ignore
			`[${person.name}](${person.url || '#'})`,
		).join( ', ' ) || ''

	const mark = `
${asciiFont( `${pkg.extra.collective.id}\n-------\n${pkg.extra.id}`, 'ANSI Shadow' )}
- Author: [${pkg.author?.name}](${pkg.author?.url || '#'})
${pkg.contributors?.length
		? ` - Contributors: ${processPeople( pkg.contributors )}`
		: ''
}
${pkg.maintainers?.length
		? ` - Maintainers: ${processPeople( pkg.maintainers )}`
		: ''
}
`
	const name         = pkg.extra.productName || pkg.extra.id || pkg.name
	const templateMark = `# Automatically generated by ${pkg.extra.id}. Please do not edit manually.`

	const REPO_URL      = typeof corePkg.repository === 'string' ? corePkg.repository : corePkg.repository?.url
	const REPO_CORE_URL = corePkg.repository
		? typeof corePkg.repository === 'string' ? corePkg.repository : joinPath( corePkg.repository.url || '', 'tree/main', corePkg.repository?.directory || '' )
		: ''

	return {
		name  : `${name.toUpperCase()} WORKSPACE`,
		desc  : `Workspace tools for ${name} repository that uses the "dovenv" core and "pigeonposse" theme`,
		const : {
			name,
			workspaceDir,
			wsDir     : workspaceDir,
			packagesDir,
			pkg,
			corePkg,
			coreDir,
			mark,
			templateMark,
			REPO_URL,
			REPO_CORE_URL,
			pkgBadges : pkgBadges( {
				pkgName  : pkg.extra.libraryId || pkg.extra.libraryID || pkg.extra.id || pkg.name,
				repoName : pkg.extra.collective.id + '/' + pkg.extra.repoId,
			}  ),
			socialBadges : socialBadges( {
				...pkg.extra.collective.social,
				web    : pkg.extra.collective.web,
				about  : pkg.extra.collective.about,
				donate : pkg.extra.collective.funding,
			} ) || '',
		},
	}

}

