import { asciiFont }      from '@dovenv/core/utils'
import {
	getCurrentDir,
	joinPath,
	getObjectFromJSONFile,
} from '@dovenv/core/utils'

import type { PackageJSON } from '@dovenv/core/utils'

export type ConstsConfig = {
	/**
	 * Package JSON object for use in `dovenv` configuration
	 * @example
	 * import { getCurrentDir, joinPath, getObjectFromJSONFile } from '@dovenv/core/utils'
	 * const workspaceDir = joinPath( getCurrentDir( import.meta.url ), '../../../../' )
	 * const pkg = await getObjectFromJSONFile( joinPath( workspaceDir, 'package.json' ) )
	 * @example
	 * import { getWorkspaceConfig } from '@dovenv/theme-pigeonposse'
	 * const { pkg } = await getWorkspaceConfig( import.meta.url, '../../../../' )
	 */
	pkg?          : PackageJSON
	/**
	 * Workspace directory for use in `dovenv` configuration
	 */
	workspaceDir? : string
}

/**
 * Get workspace configuration
 * @param {string} callerUrl - optional, url of caller function
 * @param {string} path - path to workspace directory
 * @returns {ConstsConfig} - object with keys `pkg` and `workspaceDir`
 * @example
 * import { getWorkspaceConfig } from '@dovenv/theme-pigeonposse'
 *
 * const { pkg, workspaceDir } = await getWorkspaceConfig( import.meta.url, '../../../../' )
 */
export const getWorkspaceConfig = async ( callerUrl = import.meta.url, path: string = '' ): Promise<ConstsConfig> => {

	const workspaceDir = joinPath( getCurrentDir( callerUrl ), path )
	const pkg          = await getObjectFromJSONFile<PackageJSON>( joinPath( workspaceDir, 'package.json' ) )

	return {
		pkg,
		workspaceDir,
	}

}

export const getConsts = ( params: ConstsConfig ): undefined | Record<string, unknown> => {

	const {
		pkg,
		workspaceDir,
	} = params

	if ( !pkg || typeof pkg !== 'object' ) return undefined

	const processPeople = ( people?: PackageJSON['contributors'] ) =>
		people?.filter(
			person =>
				typeof person === 'object'
				&& 'name' in person
				&& person.name
				&& 'url' in person,
		).map( person =>
			// @ts-ignore
			`[${person.name}](${person.url || '#'})`,
		).join( ', ' ) || ''

	const mark = `
${asciiFont( `${pkg.extra.collective.id}\n-------\n${pkg.extra.id}`, 'ANSI Shadow' )}
- Author: [${pkg.author?.name}](${pkg.author?.url || '#'})
${pkg.contributors?.length
		? ` - Contributors: ${processPeople( pkg.contributors )}`
		: ''
}
${pkg.maintainers?.length
		? ` - Maintainers: ${processPeople( pkg.maintainers )}`
		: ''
}
`
	const  name        = pkg.extra.productName || pkg.extra.id || pkg.name
	const templateMark = `# Automatically generated by ${pkg.extra.id}. Please do not edit manually.`

	return {
		name  : `${name.toUpperCase()} WORKSPACE`,
		desc  : `Workspace tools for ${name} repository that uses the "dovenv" core and "pigeonposse" theme`,
		const : {
			workspaceDir,
			pkg,
			mark,
			templateMark,
		},
	}

}
